
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.outlands.top/releases' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.10.6', changing: true
        //classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'

version = "${minecraft_version}-${mod_version}"
group = mod_base_package
archivesBaseName = mod_id



java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {

    mappings channel: mappings_channel, version: mappings_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
//mixin {add sourceSets.main, mod_id + "mixins.refmap.json"}
repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }

    mavenCentral()
}

dependencies {
    minecraft "com.cleanroommc:cleanroom:15.24.0.3023"
}


def resourceTargets = ['mcmod.info', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description.replace('\n', '\\n'), minecraft_version: minecraft_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}
//put what you want to replace here
def modFileTokens = [VERSION: mod_version, MODNAME: mod_name, MODID: mod_id]
def included = ["${mod_base_package.replace('.', '/')}/Reference.java".toString()]

def expandedSrc = new File(project.buildDir, 'expandedSrc')
def srcMainJava = project.file('src/main/java').toPath()
def includedPaths = included.collect { java.nio.file.Paths.get(it) }
task javaReplaceTokens(type: Copy) {
    inputs.property 'tokens', modFileTokens
    from(srcMainJava) {
        include included
    }
    into expandedSrc
    filter(org.apache.tools.ant.filters.ReplaceTokens, beginToken: '@', endToken: '@', tokens: modFileTokens)
}

compileJava {
    dependsOn javaReplaceTokens
    exclude {
        srcMainJava.relativize(it.file.toPath()) in includedPaths
    }
    source expandedSrc
}

jar {
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1', // We are version 1 of ourselves
                //'FMLCorePluginContainsFMLMod': true,
                //'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                //'FMLCorePlugin': '',
                //'ForceLoadAsMod': true
                //'FMLAT': '',
                'Implementation-Title': project.name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
